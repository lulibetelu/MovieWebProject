---
import "../assets/app.css";
import { API_URL } from "../data/config";

import HomeLayout from "../layouts/HomeLayout.astro";
import MoviesCarousel from "../components/reusables/MoviesCarousel";
import LaserFlowBox from "../components/ReactBits/LaserFlow/LaserFlowBox";
import TopActors from "../components/reusables/TopActors";
import TopDirectors from "../components/reusables/TopDirectors";

// Initialize variables to avoid undefined errors
let result = { movies: [], tmdbApiKey: "" };

/**
 * `movies` es un array de generos (key), con una lista de objetos pel√≠cula (value)
 */

try {
    const response = await fetch(`${API_URL}/top/15`);
    if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
    }
    result = await response.json();
} catch (e) {
    console.error("Error fetching data:", e);
    result = { movies: [{ title: "No movies available" }], tmdbApiKey: "" };
}

// Ensure prerender for static rendering
export const prerender = true;
---

<HomeLayout
    title="Movie Web App"
    class="relative min-h-screen w-full overflow-hidden bg-[#060010]"
>
    <main
        class="relative flex min-h-screen w-full flex-col items-center justify-center"
        data-theme="movieweb"
    >
        <Fragment slot="head">
            <style>
                @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@700&display=swap");
            </style>
        </Fragment>

        <LaserFlowBox client:only="react" />
    </main>

    {
        result.movies.length == 0 ? (
            <div class="flex justify-center items-center h-full">
                <div class="spinner animate-spin inline-block w-8 h-8 border-4 border-primary rounded-full" />
            </div>
        ) : (
            Object.entries(result.movies)
                .slice(0, 5)
                .map(([genre, movieGroup], idx) => (
                    <MoviesCarousel
                        client:visible
                        movieGroup={movieGroup}
                        title={genre}
                        idx={idx}
                    />
                ))
        )
    }

    <TopActors client:only="react" />

    {
        result.movies.length == 0 ? (
            <div class="flex justify-center items-center h-full">
                <div class="spinner animate-spin inline-block w-8 h-8 border-4 border-primary rounded-full" />
            </div>
        ) : (
            Object.entries(result.movies)
                .slice(5, 10)
                .map(([genre, movieGroup], idx) => (
                    <MoviesCarousel
                        client:visible
                        movieGroup={movieGroup}
                        title={genre}
                        idx={idx}
                    />
                ))
        )
    }

    <TopDirectors client:only="react" />

    {
        result.movies.length == 0 ? (
            <div class="flex justify-center items-center h-full">
                <div class="spinner animate-spin inline-block w-8 h-8 border-4 border-primary rounded-full" />
            </div>
        ) : (
            Object.entries(result.movies)
                .slice(10, result.movies.length)
                .map(([genre, movieGroup], idx) => (
                    <MoviesCarousel
                        client:visible
                        movieGroup={movieGroup}
                        title={genre}
                        idx={idx}
                    />
                ))
        )
    }
</HomeLayout>
